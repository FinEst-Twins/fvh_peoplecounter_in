# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EventNotificationAlert(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, protocol_type: str=None, mac_address: str=None, channel_id: str=None, date_time: datetime=None, active_post_count: str=None, event_type: str=None, event_state: str=None, event_description: str=None, channel_name: str=None, people_counting: PeopleCounting=None):  # noqa: E501
        """EventNotificationAlert - a model defined in Swagger

        :param ip_address: The ip_address of this EventNotificationAlert.  # noqa: E501
        :type ip_address: str
        :param protocol_type: The protocol_type of this EventNotificationAlert.  # noqa: E501
        :type protocol_type: str
        :param mac_address: The mac_address of this EventNotificationAlert.  # noqa: E501
        :type mac_address: str
        :param channel_id: The channel_id of this EventNotificationAlert.  # noqa: E501
        :type channel_id: str
        :param date_time: The date_time of this EventNotificationAlert.  # noqa: E501
        :type date_time: datetime
        :param active_post_count: The active_post_count of this EventNotificationAlert.  # noqa: E501
        :type active_post_count: str
        :param event_type: The event_type of this EventNotificationAlert.  # noqa: E501
        :type event_type: str
        :param event_state: The event_state of this EventNotificationAlert.  # noqa: E501
        :type event_state: str
        :param event_description: The event_description of this EventNotificationAlert.  # noqa: E501
        :type event_description: str
        :param channel_name: The channel_name of this EventNotificationAlert.  # noqa: E501
        :type channel_name: str
        :param people_counting: The people_counting of this EventNotificationAlert.  # noqa: E501
        :type people_counting: PeopleCounting
        """
        self.swagger_types = {
            'ip_address': str,
            'protocol_type': str,
            'mac_address': str,
            'channel_id': str,
            'date_time': datetime,
            'active_post_count': str,
            'event_type': str,
            'event_state': str,
            'event_description': str,
            'channel_name': str,
            'people_counting': PeopleCounting
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'protocol_type': 'protocolType',
            'mac_address': 'macAddress',
            'channel_id': 'channelID',
            'date_time': 'dateTime',
            'active_post_count': 'activePostCount',
            'event_type': 'eventType',
            'event_state': 'eventState',
            'event_description': 'eventDescription',
            'channel_name': 'channelName',
            'people_counting': 'peopleCounting'
        }

        self._ip_address = ip_address
        self._protocol_type = protocol_type
        self._mac_address = mac_address
        self._channel_id = channel_id
        self._date_time = date_time
        self._active_post_count = active_post_count
        self._event_type = event_type
        self._event_state = event_state
        self._event_description = event_description
        self._channel_name = channel_name
        self._people_counting = people_counting

    @classmethod
    def from_dict(cls, dikt) -> 'EventNotificationAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventNotificationAlert of this EventNotificationAlert.  # noqa: E501
        :rtype: EventNotificationAlert
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this EventNotificationAlert.


        :return: The ip_address of this EventNotificationAlert.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this EventNotificationAlert.


        :param ip_address: The ip_address of this EventNotificationAlert.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def protocol_type(self) -> str:
        """Gets the protocol_type of this EventNotificationAlert.


        :return: The protocol_type of this EventNotificationAlert.
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type: str):
        """Sets the protocol_type of this EventNotificationAlert.


        :param protocol_type: The protocol_type of this EventNotificationAlert.
        :type protocol_type: str
        """

        self._protocol_type = protocol_type

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this EventNotificationAlert.


        :return: The mac_address of this EventNotificationAlert.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this EventNotificationAlert.


        :param mac_address: The mac_address of this EventNotificationAlert.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def channel_id(self) -> str:
        """Gets the channel_id of this EventNotificationAlert.


        :return: The channel_id of this EventNotificationAlert.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id: str):
        """Sets the channel_id of this EventNotificationAlert.


        :param channel_id: The channel_id of this EventNotificationAlert.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def date_time(self) -> datetime:
        """Gets the date_time of this EventNotificationAlert.


        :return: The date_time of this EventNotificationAlert.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: datetime):
        """Sets the date_time of this EventNotificationAlert.


        :param date_time: The date_time of this EventNotificationAlert.
        :type date_time: datetime
        """

        self._date_time = date_time

    @property
    def active_post_count(self) -> str:
        """Gets the active_post_count of this EventNotificationAlert.


        :return: The active_post_count of this EventNotificationAlert.
        :rtype: str
        """
        return self._active_post_count

    @active_post_count.setter
    def active_post_count(self, active_post_count: str):
        """Sets the active_post_count of this EventNotificationAlert.


        :param active_post_count: The active_post_count of this EventNotificationAlert.
        :type active_post_count: str
        """

        self._active_post_count = active_post_count

    @property
    def event_type(self) -> str:
        """Gets the event_type of this EventNotificationAlert.


        :return: The event_type of this EventNotificationAlert.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this EventNotificationAlert.


        :param event_type: The event_type of this EventNotificationAlert.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def event_state(self) -> str:
        """Gets the event_state of this EventNotificationAlert.


        :return: The event_state of this EventNotificationAlert.
        :rtype: str
        """
        return self._event_state

    @event_state.setter
    def event_state(self, event_state: str):
        """Sets the event_state of this EventNotificationAlert.


        :param event_state: The event_state of this EventNotificationAlert.
        :type event_state: str
        """

        self._event_state = event_state

    @property
    def event_description(self) -> str:
        """Gets the event_description of this EventNotificationAlert.


        :return: The event_description of this EventNotificationAlert.
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description: str):
        """Sets the event_description of this EventNotificationAlert.


        :param event_description: The event_description of this EventNotificationAlert.
        :type event_description: str
        """

        self._event_description = event_description

    @property
    def channel_name(self) -> str:
        """Gets the channel_name of this EventNotificationAlert.


        :return: The channel_name of this EventNotificationAlert.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name: str):
        """Sets the channel_name of this EventNotificationAlert.


        :param channel_name: The channel_name of this EventNotificationAlert.
        :type channel_name: str
        """

        self._channel_name = channel_name

    @property
    def people_counting(self) -> PeopleCounting:
        """Gets the people_counting of this EventNotificationAlert.


        :return: The people_counting of this EventNotificationAlert.
        :rtype: PeopleCounting
        """
        return self._people_counting

    @people_counting.setter
    def people_counting(self, people_counting: PeopleCounting):
        """Sets the people_counting of this EventNotificationAlert.


        :param people_counting: The people_counting of this EventNotificationAlert.
        :type people_counting: PeopleCounting
        """

        self._people_counting = people_counting
